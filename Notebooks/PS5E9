{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":91720,"databundleVersionId":13345277,"sourceType":"competition"}],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.metrics import make_scorer\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import KFold\nimport lightgbm as lgb\nimport itertools\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-10-29T11:59:29.428288Z","iopub.execute_input":"2025-10-29T11:59:29.429783Z","iopub.status.idle":"2025-10-29T11:59:38.416301Z","shell.execute_reply.started":"2025-10-29T11:59:29.429637Z","shell.execute_reply":"2025-10-29T11:59:38.415318Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/playground-series-s5e9/sample_submission.csv\n/kaggle/input/playground-series-s5e9/train.csv\n/kaggle/input/playground-series-s5e9/test.csv\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"train = pd.read_csv(\"/kaggle/input/playground-series-s5e9/train.csv\")\ntest = pd.read_csv(\"/kaggle/input/playground-series-s5e9/test.csv\")\nX = train.drop([\"id\",\"BeatsPerMinute\"], axis = 1).values\ny = train[\"BeatsPerMinute\"].values\ntest_data = test.drop(\"id\", axis = 1).values","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-29T11:59:38.417926Z","iopub.execute_input":"2025-10-29T11:59:38.418763Z","iopub.status.idle":"2025-10-29T11:59:40.945584Z","shell.execute_reply.started":"2025-10-29T11:59:38.418731Z","shell.execute_reply":"2025-10-29T11:59:40.944552Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"print(train.describe())\ntrain.drop(\"id\",axis = 1).corr()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-29T11:59:40.946622Z","iopub.execute_input":"2025-10-29T11:59:40.948037Z","iopub.status.idle":"2025-10-29T11:59:41.490596Z","shell.execute_reply.started":"2025-10-29T11:59:40.948006Z","shell.execute_reply":"2025-10-29T11:59:41.489540Z"}},"outputs":[{"name":"stdout","text":"                  id    RhythmScore  AudioLoudness   VocalContent  \\\ncount  524164.000000  524164.000000  524164.000000  524164.000000   \nmean   262081.500000       0.632843      -8.379014       0.074443   \nstd    151313.257586       0.156899       4.616221       0.049939   \nmin         0.000000       0.076900     -27.509725       0.023500   \n25%    131040.750000       0.515850     -11.551933       0.023500   \n50%    262081.500000       0.634686      -8.252499       0.066425   \n75%    393122.250000       0.739179      -4.912298       0.107343   \nmax    524163.000000       0.975000      -1.357000       0.256401   \n\n       AcousticQuality  InstrumentalScore  LivePerformanceLikelihood  \\\ncount    524164.000000      524164.000000              524164.000000   \nmean          0.262913           0.117690                   0.178398   \nstd           0.223120           0.131845                   0.118186   \nmin           0.000005           0.000001                   0.024300   \n25%           0.069413           0.000001                   0.077637   \n50%           0.242502           0.074247                   0.166327   \n75%           0.396957           0.204065                   0.268946   \nmax           0.995000           0.869258                   0.599924   \n\n           MoodScore  TrackDurationMs         Energy  BeatsPerMinute  \ncount  524164.000000    524164.000000  524164.000000   524164.000000  \nmean        0.555843    241903.692949       0.500923      119.034899  \nstd         0.225480     59326.601501       0.289952       26.468077  \nmin         0.025600     63973.000000       0.000067       46.718000  \n25%         0.403921    207099.876625       0.254933      101.070410  \n50%         0.564817    243684.058150       0.511800      118.747660  \n75%         0.716633    281851.658500       0.746000      136.686590  \nmax         0.978000    464723.228100       1.000000      206.037000  \n","output_type":"stream"},{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"                           RhythmScore  AudioLoudness  VocalContent  \\\nRhythmScore                   1.000000      -0.017385      0.008737   \nAudioLoudness                -0.017385       1.000000     -0.009357   \nVocalContent                  0.008737      -0.009357      1.000000   \nAcousticQuality               0.028203      -0.013019      0.009370   \nInstrumentalScore             0.010992       0.003772     -0.017739   \nLivePerformanceLikelihood     0.031535      -0.021620     -0.120294   \nMoodScore                    -0.008946      -0.027305      0.058675   \nTrackDurationMs              -0.017640       0.004510      0.018179   \nEnergy                       -0.147350       0.192411      0.016124   \nBeatsPerMinute                0.005440      -0.003327      0.004876   \n\n                           AcousticQuality  InstrumentalScore  \\\nRhythmScore                       0.028203           0.010992   \nAudioLoudness                    -0.013019           0.003772   \nVocalContent                      0.009370          -0.017739   \nAcousticQuality                   1.000000           0.003247   \nInstrumentalScore                 0.003247           1.000000   \nLivePerformanceLikelihood         0.009678          -0.002403   \nMoodScore                         0.037047           0.004738   \nTrackDurationMs                  -0.022524           0.009340   \nEnergy                           -0.418184          -0.019834   \nBeatsPerMinute                   -0.000820           0.001900   \n\n                           LivePerformanceLikelihood  MoodScore  \\\nRhythmScore                                 0.031535  -0.008946   \nAudioLoudness                              -0.021620  -0.027305   \nVocalContent                               -0.120294   0.058675   \nAcousticQuality                             0.009678   0.037047   \nInstrumentalScore                          -0.002403   0.004738   \nLivePerformanceLikelihood                   1.000000   0.015461   \nMoodScore                                   0.015461   1.000000   \nTrackDurationMs                             0.005179  -0.014803   \nEnergy                                     -0.266256  -0.241713   \nBeatsPerMinute                              0.003471   0.007059   \n\n                           TrackDurationMs    Energy  BeatsPerMinute  \nRhythmScore                      -0.017640 -0.147350        0.005440  \nAudioLoudness                     0.004510  0.192411       -0.003327  \nVocalContent                      0.018179  0.016124        0.004876  \nAcousticQuality                  -0.022524 -0.418184       -0.000820  \nInstrumentalScore                 0.009340 -0.019834        0.001900  \nLivePerformanceLikelihood         0.005179 -0.266256        0.003471  \nMoodScore                        -0.014803 -0.241713        0.007059  \nTrackDurationMs                   1.000000  0.048597        0.006637  \nEnergy                            0.048597  1.000000       -0.004375  \nBeatsPerMinute                    0.006637 -0.004375        1.000000  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>RhythmScore</th>\n      <th>AudioLoudness</th>\n      <th>VocalContent</th>\n      <th>AcousticQuality</th>\n      <th>InstrumentalScore</th>\n      <th>LivePerformanceLikelihood</th>\n      <th>MoodScore</th>\n      <th>TrackDurationMs</th>\n      <th>Energy</th>\n      <th>BeatsPerMinute</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>RhythmScore</th>\n      <td>1.000000</td>\n      <td>-0.017385</td>\n      <td>0.008737</td>\n      <td>0.028203</td>\n      <td>0.010992</td>\n      <td>0.031535</td>\n      <td>-0.008946</td>\n      <td>-0.017640</td>\n      <td>-0.147350</td>\n      <td>0.005440</td>\n    </tr>\n    <tr>\n      <th>AudioLoudness</th>\n      <td>-0.017385</td>\n      <td>1.000000</td>\n      <td>-0.009357</td>\n      <td>-0.013019</td>\n      <td>0.003772</td>\n      <td>-0.021620</td>\n      <td>-0.027305</td>\n      <td>0.004510</td>\n      <td>0.192411</td>\n      <td>-0.003327</td>\n    </tr>\n    <tr>\n      <th>VocalContent</th>\n      <td>0.008737</td>\n      <td>-0.009357</td>\n      <td>1.000000</td>\n      <td>0.009370</td>\n      <td>-0.017739</td>\n      <td>-0.120294</td>\n      <td>0.058675</td>\n      <td>0.018179</td>\n      <td>0.016124</td>\n      <td>0.004876</td>\n    </tr>\n    <tr>\n      <th>AcousticQuality</th>\n      <td>0.028203</td>\n      <td>-0.013019</td>\n      <td>0.009370</td>\n      <td>1.000000</td>\n      <td>0.003247</td>\n      <td>0.009678</td>\n      <td>0.037047</td>\n      <td>-0.022524</td>\n      <td>-0.418184</td>\n      <td>-0.000820</td>\n    </tr>\n    <tr>\n      <th>InstrumentalScore</th>\n      <td>0.010992</td>\n      <td>0.003772</td>\n      <td>-0.017739</td>\n      <td>0.003247</td>\n      <td>1.000000</td>\n      <td>-0.002403</td>\n      <td>0.004738</td>\n      <td>0.009340</td>\n      <td>-0.019834</td>\n      <td>0.001900</td>\n    </tr>\n    <tr>\n      <th>LivePerformanceLikelihood</th>\n      <td>0.031535</td>\n      <td>-0.021620</td>\n      <td>-0.120294</td>\n      <td>0.009678</td>\n      <td>-0.002403</td>\n      <td>1.000000</td>\n      <td>0.015461</td>\n      <td>0.005179</td>\n      <td>-0.266256</td>\n      <td>0.003471</td>\n    </tr>\n    <tr>\n      <th>MoodScore</th>\n      <td>-0.008946</td>\n      <td>-0.027305</td>\n      <td>0.058675</td>\n      <td>0.037047</td>\n      <td>0.004738</td>\n      <td>0.015461</td>\n      <td>1.000000</td>\n      <td>-0.014803</td>\n      <td>-0.241713</td>\n      <td>0.007059</td>\n    </tr>\n    <tr>\n      <th>TrackDurationMs</th>\n      <td>-0.017640</td>\n      <td>0.004510</td>\n      <td>0.018179</td>\n      <td>-0.022524</td>\n      <td>0.009340</td>\n      <td>0.005179</td>\n      <td>-0.014803</td>\n      <td>1.000000</td>\n      <td>0.048597</td>\n      <td>0.006637</td>\n    </tr>\n    <tr>\n      <th>Energy</th>\n      <td>-0.147350</td>\n      <td>0.192411</td>\n      <td>0.016124</td>\n      <td>-0.418184</td>\n      <td>-0.019834</td>\n      <td>-0.266256</td>\n      <td>-0.241713</td>\n      <td>0.048597</td>\n      <td>1.000000</td>\n      <td>-0.004375</td>\n    </tr>\n    <tr>\n      <th>BeatsPerMinute</th>\n      <td>0.005440</td>\n      <td>-0.003327</td>\n      <td>0.004876</td>\n      <td>-0.000820</td>\n      <td>0.001900</td>\n      <td>0.003471</td>\n      <td>0.007059</td>\n      <td>0.006637</td>\n      <td>-0.004375</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":3},{"cell_type":"code","source":"from sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.ensemble import RandomForestRegressor\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-29T11:59:41.491643Z","iopub.execute_input":"2025-10-29T11:59:41.491911Z","iopub.status.idle":"2025-10-29T11:59:41.944392Z","shell.execute_reply.started":"2025-10-29T11:59:41.491889Z","shell.execute_reply":"2025-10-29T11:59:41.943554Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"def featurepreparation(data, train = True):\n    if train:\n        features = data.drop([\"id\", \"BeatsPerMinute\"], axis = 1).columns\n        new_data = data.drop([\"id\", \"BeatsPerMinute\"], axis = 1).copy()\n        new_data1 = pd.DataFrame()\n    else:\n        features = data.drop([\"id\"], axis = 1).columns\n        new_data = data.drop([\"id\"], axis = 1).copy()\n        new_data1 = pd.DataFrame()\n    for feature1, feature2 in itertools.combinations(features, 2):\n        new_var = \"{}_x_{}\".format(feature1,feature2)\n        new_data[new_var] = new_data[feature1] * new_data[feature2]\n    for feature1 in features:\n        for feature2 in features:\n            if feature1 != feature2:\n                new_var = \"{}_per_{}\".format(feature1, feature2)\n                new_data1[new_var] = new_data[feature1]/(np.abs(new_data[feature2]))\n    new_data = pd.concat([new_data, new_data1], axis = 1)\n    return new_data\nnew_X_train = featurepreparation(train)\nnew_X_test = featurepreparation(test, train = False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-29T11:59:41.945182Z","iopub.execute_input":"2025-10-29T11:59:41.945425Z","iopub.status.idle":"2025-10-29T11:59:44.341277Z","shell.execute_reply.started":"2025-10-29T11:59:41.945406Z","shell.execute_reply":"2025-10-29T11:59:44.340338Z"}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"# Random Forest\n#parameters = {'max_features': [int(x) for x in np.logspace(np.log10(1),np.log10(50), num = 5)],\n#             'min_samples_leaf': [int(x) for x in np.logspace(np.log10(1), np.log10(256), num = 100)],\n#              #randint\n#             'min_samples_split': [int(x) for x in np.logspace(np.log10(2), np.log10(256), num = 100)],\n#             'max_depth': [3,5,7]}\n#rf_regr = RandomForestRegressor(n_estimators = 50)\n#CV = RandomizedSearchCV(estimator = rf_regr, param_distributions = parameters, n_iter = 15, cv = 2)\n#CV.fit(new_X_train, y)\n#print(CV.best_estimator_)\n#print(CV.best_score_)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-29T11:59:44.342484Z","iopub.execute_input":"2025-10-29T11:59:44.342832Z","iopub.status.idle":"2025-10-29T11:59:44.349009Z","shell.execute_reply.started":"2025-10-29T11:59:44.342801Z","shell.execute_reply":"2025-10-29T11:59:44.347693Z"}},"outputs":[],"execution_count":6},{"cell_type":"code","source":"rf_model = RandomForestRegressor(n_estimators = 800, max_depth = 7, max_features=49, \n                                min_samples_split=13)\nrf_model.fit(new_X_train, y)\npredictions = rf_model.predict(new_X_test)\n\noutput = pd.DataFrame({'id': test.id, 'BeatsPerMinute': predictions})\noutput.to_csv('submission_rf_new.csv', index=False)\nprint(\"Your submission was successfully saved!\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-29T11:59:44.352187Z","iopub.execute_input":"2025-10-29T11:59:44.352566Z"}},"outputs":[],"execution_count":null}]}